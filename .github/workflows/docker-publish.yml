name: Docker

on:
  schedule:
    - cron: '0 */6 * * *'  # Check every 6 hours for new releases
  push:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual triggers

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Get the latest seanime release version
      - name: Get latest seanime release
        id: seanime
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/5rahim/seanime/releases/latest | jq -r '.tag_name')
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest seanime version: $LATEST_VERSION"

      # Check if we already built this version
      - name: Check if image exists
        id: check
        run: |
          if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.seanime.outputs.version }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image already exists for version ${{ steps.seanime.outputs.version }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Image does not exist, will build"
          fi
        continue-on-error: true

      - name: Install cosign
        if: steps.check.outputs.exists != 'true'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists != 'true'
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: steps.check.outputs.exists != 'true'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        if: steps.check.outputs.exists != 'true'
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.seanime.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        if: steps.check.outputs.exists != 'true'
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: steps.check.outputs.exists != 'true'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
